volumes:
  mlflow-postgres-data:
  mlflow-postgres-auth-data:
  mlflow-minio-data:
  langfuse_postgres_data:
  langfuse_clickhouse_data:
  langfuse_clickhouse_logs:
  langfuse_minio_data:

services:
  mlflow-postgres:
    image: postgres:15
    container_name: mlflow-postgres
    restart: always
    environment:
      POSTGRES_USER: ${MLFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${MLFLOW_POSTGRES_PASSWORD}
      POSTGRES_DB: ${MLFLOW_POSTGRES_DB}
    volumes:
      - mlflow-postgres-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MLFLOW_POSTGRES_USER}"]
      interval: 5s
      timeout: 3s
      retries: 10

  mlflow-postgres-auth:
    image: postgres:15
    container_name: mlflow-postgres-auth
    restart: always
    environment:
      POSTGRES_USER: ${MLFLOW_POSTGRES_AUTH_USER}
      POSTGRES_PASSWORD: ${MLFLOW_POSTGRES_AUTH_PASSWORD}
      POSTGRES_DB: ${MLFLOW_POSTGRES_AUTH_DB}
    volumes:
      - mlflow-postgres-auth-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MLFLOW_POSTGRES_AUTH_USER}"]
      interval: 5s
      timeout: 3s
      retries: 10

  mlflow-minio:
    image: minio/minio:latest
    container_name: mlflow-minio
    restart: always
    environment:
      MINIO_ROOT_USER: ${MLFLOW_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MLFLOW_MINIO_ROOT_PASSWORD}
    volumes:
      - mlflow-minio-data:/data
    command: server /data --console-address ":9001"
    ports:
      - "9002:9000"
      - "9003:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MLFLOW_MINIO_PORT}/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 20

  mlflow-create-bucket:
    image: minio/mc:latest
    container_name: mlflow-create-bucket
    restart: "no"
    depends_on:
      mlflow-minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c '
        mc alias set myminio http://${MLFLOW_MINIO_HOST}:${MLFLOW_MINIO_PORT} \
          ${MLFLOW_MINIO_ROOT_USER} ${MLFLOW_MINIO_ROOT_PASSWORD} &&
        mc mb --ignore-existing myminio/${MLFLOW_MINIO_BUCKET}
      '
    

  mlflow-server:
    image: ghcr.io/mlflow/mlflow:${MLFLOW_VERSION}
    container_name: mlflow-server
    restart: always
    depends_on:
      mlflow-postgres:
        condition: service_healthy
      mlflow-postgres-auth:
        condition: service_healthy
      mlflow-minio:
        condition: service_healthy
      mlflow-create-bucket:
        condition: service_completed_successfully
    volumes:
      - ./mlflow_auth_config.ini.template:/mlflow/mlflow_auth_config.ini.template:ro
    environment:
      # Backend store URI
      MLFLOW_BACKEND_STORE_URI: ${MLFLOW_BACKEND_STORE_URI}

      # S3/MinIO settings
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
      AWS_ACCESS_KEY_ID: ${MLFLOW_MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MLFLOW_MINIO_ROOT_PASSWORD}
      AWS_DEFAULT_REGION: ${MLFLOW_AWS_DEFAULT_REGION}
      MLFLOW_S3_IGNORE_TLS: "true"

      # Server host/port
      MLFLOW_HOST: ${MLFLOW_HOST}
      MLFLOW_PORT: ${MLFLOW_PORT}

      # Authentication settings
      MLFLOW_FLASK_SERVER_SECRET_KEY: ${MLFLOW_FLASK_SERVER_SECRET_KEY}
      MLFLOW_AUTH_CONFIG_PATH: /mlflow/mlflow_auth_config.ini
      
      # Auth database credentials (for envsubst)
      MLFLOW_POSTGRES_AUTH_USER: ${MLFLOW_POSTGRES_AUTH_USER}
      MLFLOW_POSTGRES_AUTH_PASSWORD: ${MLFLOW_POSTGRES_AUTH_PASSWORD}
      MLFLOW_POSTGRES_AUTH_DB: ${MLFLOW_POSTGRES_AUTH_DB}
      MLFLOW_ADMIN_USERNAME: ${MLFLOW_ADMIN_USERNAME}
      MLFLOW_ADMIN_PASSWORD: ${MLFLOW_ADMIN_PASSWORD}
      
      # Force gunicorn server
      GUNICORN_CMD_ARGS: "--bind=0.0.0.0:5000 --workers=1"

    command: >
      /bin/bash -c "
        apt-get update && apt-get install -y gettext-base &&
        pip install --no-cache-dir psycopg2-binary boto3 'mlflow[auth]' &&
        envsubst < /mlflow/mlflow_auth_config.ini.template > /mlflow/mlflow_auth_config.ini &&
        gunicorn -b 0.0.0.0:5000 -w 1 'mlflow.server.auth:create_app()'
      "
    ports:
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:${MLFLOW_PORT}/health')",
        ]
      interval: 10s
      timeout: 5s
      retries: 30

  langfuse-worker:
    image: docker.io/langfuse/langfuse-worker:3
    container_name: langfuse-worker
    restart: always
    depends_on: &langfuse-depends-on
      langfuse-postgres:
        condition: service_healthy
      langfuse-minio:
        condition: service_healthy
      langfuse-redis:
        condition: service_healthy
      langfuse-clickhouse:
        condition: service_healthy
      langfuse-create-bucket:
        condition: service_completed_successfully
    ports:
      - "3030:3030"
    environment: &langfuse-worker-env
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      DATABASE_URL: ${LANGFUSE_DATABASE_URL}
      SALT: ${SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}
      CLICKHOUSE_MIGRATION_URL: ${LANGFUSE_CLICKHOUSE_MIGRATION_URL}
      CLICKHOUSE_URL: ${LANGFUSE_CLICKHOUSE_URL}
      CLICKHOUSE_USER: ${LANGFUSE_CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${LANGFUSE_CLICKHOUSE_PASSWORD}
      CLICKHOUSE_CLUSTER_ENABLED: ${LANGFUSE_CLICKHOUSE_CLUSTER_ENABLED:-false}
      LANGFUSE_USE_AZURE_BLOB: ${LANGFUSE_USE_AZURE_BLOB:-false}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX}
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${LANGFUSE_S3_MEDIA_UPLOAD_BUCKET}
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION}
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY}
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: ${LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: ${LANGFUSE_S3_MEDIA_UPLOAD_PREFIX}
      LANGFUSE_S3_BATCH_EXPORT_ENABLED: ${LANGFUSE_S3_BATCH_EXPORT_ENABLED:-false}
      LANGFUSE_S3_BATCH_EXPORT_BUCKET: ${LANGFUSE_S3_BATCH_EXPORT_BUCKET}
      LANGFUSE_S3_BATCH_EXPORT_PREFIX: ${LANGFUSE_S3_BATCH_EXPORT_PREFIX}
      LANGFUSE_S3_BATCH_EXPORT_REGION: ${LANGFUSE_S3_BATCH_EXPORT_REGION}
      LANGFUSE_S3_BATCH_EXPORT_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_ENDPOINT}
      LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT}
      LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID: ${LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID}
      LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY: ${LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY}
      LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE: ${LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE:-true}
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ${LANGFUSE_INGESTION_QUEUE_DELAY_MS:-}
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ${LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS:-}
      REDIS_HOST: ${LANGFUSE_REDIS_HOST}
      REDIS_PORT: ${LANGFUSE_REDIS_PORT}
      REDIS_AUTH: ${LANGFUSE_REDIS_AUTH}
      REDIS_TLS_ENABLED: ${LANGFUSE_REDIS_TLS_ENABLED:-false}
      REDIS_TLS_CA: ${REDIS_TLS_CA:-/certs/ca.crt}
      REDIS_TLS_CERT: ${REDIS_TLS_CERT:-/certs/redis.crt}
      REDIS_TLS_KEY: ${REDIS_TLS_KEY:-/certs/redis.key}
      EMAIL_FROM_ADDRESS: ${EMAIL_FROM_ADDRESS:-}
      SMTP_CONNECTION_URL: ${SMTP_CONNECTION_URL:-}

  langfuse-web:
    image: docker.io/langfuse/langfuse:3
    container_name: langfuse-web
    restart: always
    depends_on: *langfuse-depends-on
    ports:
      - "3000:3000"
    environment:
      <<: *langfuse-worker-env
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-}

  langfuse-clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: langfuse-clickhouse
    restart: always
    user: "101:101"
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: ${LANGFUSE_CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${LANGFUSE_CLICKHOUSE_PASSWORD}
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    ports:
      - "8123:8123"
      - "9004:9000"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s

  langfuse-minio:
    image: minio/minio:latest
    container_name: langfuse-minio
    restart: always
    entrypoint: sh
    # create the 'langfuse' bucket before starting the service
    command: -c 'mkdir -p /data/${LANGFUSE_MINIO_BUCKET} && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: ${LANGFUSE_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${LANGFUSE_MINIO_ROOT_PASSWORD}
    ports:
      - "9090:9000"
      - "9091:9001"
    volumes:
      - langfuse_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  langfuse-create-bucket:
    image: minio/mc:latest
    container_name: langfuse-create-bucket
    depends_on:
      langfuse-minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c '
        mc alias set langfuseminio http://${LANGFUSE_MINIO_HOST}:${LANGFUSE_MINIO_PORT} \
          ${LANGFUSE_MINIO_ROOT_USER} ${LANGFUSE_MINIO_ROOT_PASSWORD} &&
        mc mb --ignore-existing langfuseminio/${LANGFUSE_MINIO_BUCKET}
      '
    restart: "no"

  langfuse-redis:
    image: redis:7
    container_name: langfuse-redis
    restart: always
    command: >
      --requirepass ${LANGFUSE_REDIS_AUTH}
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10

  langfuse-postgres:
    image: postgres:${LANGFUSE_POSTGRES_VERSION:-17}
    container_name: langfuse-postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${LANGFUSE_POSTGRES_USER}"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      POSTGRES_USER: ${LANGFUSE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${LANGFUSE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${LANGFUSE_POSTGRES_DB}
      TZ: UTC
      PGTZ: UTC
    ports:
      - "5435:5432"
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data

networks:
  default:
    name: mlops-stack-network