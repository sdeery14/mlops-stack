volumes:
  mlflow-postgres-data:
  mlflow-postgres-auth-data:
  mlflow-minio-data:

services:
  mlflow-postgres:
    image: postgres:15
    container_name: mlflow-postgres
    environment:
      POSTGRES_USER: ${MLFLOW_POSTGRES_USER}
      POSTGRES_PASSWORD: ${MLFLOW_POSTGRES_PASSWORD}
      POSTGRES_DB: ${MLFLOW_POSTGRES_DB}
    volumes:
      - mlflow-postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MLFLOW_POSTGRES_USER}"]
      interval: 5s
      timeout: 3s
      retries: 10

  mlflow-postgres-auth:
    image: postgres:15
    container_name: mlflow-postgres-auth
    environment:
      POSTGRES_USER: ${MLFLOW_POSTGRES_AUTH_USER}
      POSTGRES_PASSWORD: ${MLFLOW_POSTGRES_AUTH_PASSWORD}
      POSTGRES_DB: ${MLFLOW_POSTGRES_AUTH_DB}
    volumes:
      - mlflow-postgres-auth-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MLFLOW_POSTGRES_AUTH_USER}"]
      interval: 5s
      timeout: 3s
      retries: 10

  mlflow-minio:
    image: minio/minio:latest
    container_name: mlflow-minio
    environment:
      MINIO_ROOT_USER: ${MLFLOW_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MLFLOW_MINIO_ROOT_PASSWORD}
    volumes:
      - mlflow-minio-data:/data
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MLFLOW_MINIO_PORT}/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 20

  mlflow-create-bucket:
    image: minio/mc:latest
    container_name: mlflow-create-bucket
    depends_on:
      mlflow-minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c '
        mc alias set myminio http://${MLFLOW_MINIO_HOST}:${MLFLOW_MINIO_PORT} \
          ${MLFLOW_MINIO_ROOT_USER} ${MLFLOW_MINIO_ROOT_PASSWORD} &&
        mc mb --ignore-existing myminio/${MLFLOW_MINIO_BUCKET}
      '
    restart: "no"

  mlflow-server:
    image: ghcr.io/mlflow/mlflow:${MLFLOW_VERSION}
    container_name: mlflow-server
    depends_on:
      mlflow-postgres:
        condition: service_healthy
      mlflow-postgres-auth:
        condition: service_healthy
      mlflow-minio:
        condition: service_healthy
      mlflow-create-bucket:
        condition: service_completed_successfully
    volumes:
      - ./mlflow_auth_config.ini.template:/mlflow/mlflow_auth_config.ini.template:ro
    environment:
      # Backend store URI
      MLFLOW_BACKEND_STORE_URI: ${MLFLOW_BACKEND_STORE_URI}

      # S3/MinIO settings
      MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
      AWS_ACCESS_KEY_ID: ${MLFLOW_MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MLFLOW_MINIO_ROOT_PASSWORD}
      AWS_DEFAULT_REGION: ${MLFLOW_AWS_DEFAULT_REGION}
      MLFLOW_S3_IGNORE_TLS: "true"

      # Server host/port
      MLFLOW_HOST: ${MLFLOW_HOST}
      MLFLOW_PORT: ${MLFLOW_PORT}

      # Authentication settings
      MLFLOW_FLASK_SERVER_SECRET_KEY: ${MLFLOW_FLASK_SERVER_SECRET_KEY}
      MLFLOW_AUTH_CONFIG_PATH: /mlflow/mlflow_auth_config.ini
      
      # Auth database credentials (for envsubst)
      MLFLOW_POSTGRES_AUTH_USER: ${MLFLOW_POSTGRES_AUTH_USER}
      MLFLOW_POSTGRES_AUTH_PASSWORD: ${MLFLOW_POSTGRES_AUTH_PASSWORD}
      MLFLOW_POSTGRES_AUTH_DB: ${MLFLOW_POSTGRES_AUTH_DB}
      MLFLOW_ADMIN_USERNAME: ${MLFLOW_ADMIN_USERNAME}
      MLFLOW_ADMIN_PASSWORD: ${MLFLOW_ADMIN_PASSWORD}
      
      # Force gunicorn server
      GUNICORN_CMD_ARGS: "--bind=0.0.0.0:5000 --workers=1"

    command: >
      /bin/bash -c "
        apt-get update && apt-get install -y gettext-base &&
        pip install --no-cache-dir psycopg2-binary boto3 'mlflow[auth]' &&
        envsubst < /mlflow/mlflow_auth_config.ini.template > /mlflow/mlflow_auth_config.ini &&
        gunicorn -b 0.0.0.0:5000 -w 1 'mlflow.server.auth:create_app()'
      "
    ports:
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:${MLFLOW_PORT}/health')",
        ]
      interval: 10s
      timeout: 5s
      retries: 30

networks:
  default:
    name: mlflow-network